# coding: utf-8

"""
    Unstructured Pipeline API

    At Unstructured, we're on a mission to give organizations access to all of their data. We know the world runs on documentsâ€”from research reports and memos, to quarterly filings and plans of action, documents are the unit of information that companies depend on. And yet, 80% of this information is trapped in inaccessible formats, and businesses have long struggled to unlock this data, leading to information silos, inefficient decision-making, and repetitive work. Until now.  Unstructured captures this unstructured data wherever it lives and transforms it into AI-friendly JSON files for companies who are eager to fold AI into their business.

    The version of the OpenAPI document: 0.0.1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from unstructured_python_sdk.pydantic.partition_parameters_extract_image_block_types import PartitionParametersExtractImageBlockTypes
from unstructured_python_sdk.pydantic.partition_parameters_languages import PartitionParametersLanguages
from unstructured_python_sdk.pydantic.partition_parameters_skip_infer_table_types import PartitionParametersSkipInferTableTypes

class PartitionParameters(BaseModel):
    # The file to extract
    files: typing.Optional[typing.IO] = Field(None, alias='files')

    # The strategy to use for partitioning PDF/image. Options are fast, hi_res, auto. Default: auto
    strategy: typing.Optional[str] = Field(None, alias='strategy')

    # If file is gzipped, use this content type after unzipping
    gz_uncompressed_content_type: typing.Optional[str] = Field(None, alias='gz_uncompressed_content_type')

    # The format of the response. Supported formats are application/json and text/csv. Default: application/json.
    output_format: typing.Optional[str] = Field(None, alias='output_format')

    # If true, return coordinates for each element. Default: false
    coordinates: typing.Optional[bool] = Field(None, alias='coordinates')

    # The encoding method used to decode the text input. Default: utf-8
    encoding: typing.Optional[str] = Field(None, alias='encoding')

    # The name of the inference model used when strategy is hi_res
    hi_res_model_name: typing.Optional[str] = Field(None, alias='hi_res_model_name')

    # If True, the output will include page breaks if the filetype supports it. Default: false
    include_page_breaks: typing.Optional[bool] = Field(None, alias='include_page_breaks')

    languages: typing.Optional[PartitionParametersLanguages] = Field(None, alias='languages')

    # If True and strategy=hi_res, any Table Elements extracted from a PDF will include an additional metadata field, 'text_as_html', where the value (string) is a just a transformation of the data into an HTML <table>.
    pdf_infer_table_structure: typing.Optional[bool] = Field(None, alias='pdf_infer_table_structure')

    skip_infer_table_types: typing.Optional[PartitionParametersSkipInferTableTypes] = Field(None, alias='skip_infer_table_types')

    # If True, will retain the XML tags in the output. Otherwise it will simply extract the text from within the tags. Only applies to partition_xml.
    xml_keep_tags: typing.Optional[bool] = Field(None, alias='xml_keep_tags')

    # Use one of the supported strategies to chunk the returned elements. Currently supports: by_title
    chunking_strategy: typing.Optional[str] = Field(None, alias='chunking_strategy')

    # If chunking strategy is set, determines if sections can span multiple sections. Default: true
    multipage_sections: typing.Optional[bool] = Field(None, alias='multipage_sections')

    # If chunking strategy is set, combine elements until a section reaches a length of n chars. Default: 500
    combine_under_n_chars: typing.Optional[int] = Field(None, alias='combine_under_n_chars')

    # If chunking strategy is set, cut off new sections after reaching a length of n chars (soft max). Default: 1500
    new_after_n_chars: typing.Optional[int] = Field(None, alias='new_after_n_chars')

    # If chunking strategy is set, cut off new sections after reaching a length of n chars (hard max). Default: 1500
    max_characters: typing.Optional[int] = Field(None, alias='max_characters')

    # A prefix of this many trailing characters from prior text-split chunk is applied to second and later chunks formed from oversized elements by text-splitting. Default: None
    overlap: typing.Optional[int] = Field(None, alias='overlap')

    # When True, overlap is also applied to 'normal' chunks formed by combining whole elements. Use with caution as this can introduce noise into otherwise clean semantic units. Default: None
    overlap_all: typing.Optional[bool] = Field(None, alias='overlap_all')

    extract_image_block_types: typing.Optional[PartitionParametersExtractImageBlockTypes] = Field(None, alias='extract_image_block_types')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
