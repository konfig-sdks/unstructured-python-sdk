# coding: utf-8

"""
    Unstructured Pipeline API

    At Unstructured, we're on a mission to give organizations access to all of their data. We know the world runs on documentsâ€”from research reports and memos, to quarterly filings and plans of action, documents are the unit of information that companies depend on. And yet, 80% of this information is trapped in inaccessible formats, and businesses have long struggled to unlock this data, leading to information silos, inefficient decision-making, and repetitive work. Until now.  Unstructured captures this unstructured data wherever it lives and transforms it into AI-friendly JSON files for companies who are eager to fold AI into their business.

    The version of the OpenAPI document: 0.0.1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING

from unstructured_python_sdk.type.partition_parameters_extract_image_block_types import PartitionParametersExtractImageBlockTypes
from unstructured_python_sdk.type.partition_parameters_languages import PartitionParametersLanguages
from unstructured_python_sdk.type.partition_parameters_skip_infer_table_types import PartitionParametersSkipInferTableTypes

class RequiredPartitionParameters(TypedDict):
    pass

class OptionalPartitionParameters(TypedDict, total=False):
    # The file to extract
    files: typing.IO

    # The strategy to use for partitioning PDF/image. Options are fast, hi_res, auto. Default: auto
    strategy: str

    # If file is gzipped, use this content type after unzipping
    gz_uncompressed_content_type: str

    # The format of the response. Supported formats are application/json and text/csv. Default: application/json.
    output_format: str

    # If true, return coordinates for each element. Default: false
    coordinates: bool

    # The encoding method used to decode the text input. Default: utf-8
    encoding: str

    # The name of the inference model used when strategy is hi_res
    hi_res_model_name: str

    # If True, the output will include page breaks if the filetype supports it. Default: false
    include_page_breaks: bool

    languages: PartitionParametersLanguages

    # If True and strategy=hi_res, any Table Elements extracted from a PDF will include an additional metadata field, 'text_as_html', where the value (string) is a just a transformation of the data into an HTML <table>.
    pdf_infer_table_structure: bool

    skip_infer_table_types: PartitionParametersSkipInferTableTypes

    # If True, will retain the XML tags in the output. Otherwise it will simply extract the text from within the tags. Only applies to partition_xml.
    xml_keep_tags: bool

    # Use one of the supported strategies to chunk the returned elements. Currently supports: by_title
    chunking_strategy: str

    # If chunking strategy is set, determines if sections can span multiple sections. Default: true
    multipage_sections: bool

    # If chunking strategy is set, combine elements until a section reaches a length of n chars. Default: 500
    combine_under_n_chars: int

    # If chunking strategy is set, cut off new sections after reaching a length of n chars (soft max). Default: 1500
    new_after_n_chars: int

    # If chunking strategy is set, cut off new sections after reaching a length of n chars (hard max). Default: 1500
    max_characters: int

    # A prefix of this many trailing characters from prior text-split chunk is applied to second and later chunks formed from oversized elements by text-splitting. Default: None
    overlap: int

    # When True, overlap is also applied to 'normal' chunks formed by combining whole elements. Use with caution as this can introduce noise into otherwise clean semantic units. Default: None
    overlap_all: bool

    extract_image_block_types: PartitionParametersExtractImageBlockTypes

class PartitionParameters(RequiredPartitionParameters, OptionalPartitionParameters):
    pass
