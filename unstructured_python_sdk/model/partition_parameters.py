# coding: utf-8

"""
    Unstructured Pipeline API

    At Unstructured, we're on a mission to give organizations access to all of their data. We know the world runs on documentsâ€”from research reports and memos, to quarterly filings and plans of action, documents are the unit of information that companies depend on. And yet, 80% of this information is trapped in inaccessible formats, and businesses have long struggled to unlock this data, leading to information silos, inefficient decision-making, and repetitive work. Until now.  Unstructured captures this unstructured data wherever it lives and transforms it into AI-friendly JSON files for companies who are eager to fold AI into their business.

    The version of the OpenAPI document: 0.0.1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unstructured_python_sdk import schemas  # noqa: F401


class PartitionParameters(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            files = schemas.BinarySchema
            strategy = schemas.StrSchema
            gz_uncompressed_content_type = schemas.StrSchema
            output_format = schemas.StrSchema
            coordinates = schemas.BoolSchema
            encoding = schemas.StrSchema
            hi_res_model_name = schemas.StrSchema
            include_page_breaks = schemas.BoolSchema
        
            @staticmethod
            def languages() -> typing.Type['PartitionParametersLanguages']:
                return PartitionParametersLanguages
            pdf_infer_table_structure = schemas.BoolSchema
        
            @staticmethod
            def skip_infer_table_types() -> typing.Type['PartitionParametersSkipInferTableTypes']:
                return PartitionParametersSkipInferTableTypes
            xml_keep_tags = schemas.BoolSchema
            chunking_strategy = schemas.StrSchema
            multipage_sections = schemas.BoolSchema
            combine_under_n_chars = schemas.IntSchema
            new_after_n_chars = schemas.IntSchema
            max_characters = schemas.IntSchema
            overlap = schemas.IntSchema
            overlap_all = schemas.BoolSchema
        
            @staticmethod
            def extract_image_block_types() -> typing.Type['PartitionParametersExtractImageBlockTypes']:
                return PartitionParametersExtractImageBlockTypes
            __annotations__ = {
                "files": files,
                "strategy": strategy,
                "gz_uncompressed_content_type": gz_uncompressed_content_type,
                "output_format": output_format,
                "coordinates": coordinates,
                "encoding": encoding,
                "hi_res_model_name": hi_res_model_name,
                "include_page_breaks": include_page_breaks,
                "languages": languages,
                "pdf_infer_table_structure": pdf_infer_table_structure,
                "skip_infer_table_types": skip_infer_table_types,
                "xml_keep_tags": xml_keep_tags,
                "chunking_strategy": chunking_strategy,
                "multipage_sections": multipage_sections,
                "combine_under_n_chars": combine_under_n_chars,
                "new_after_n_chars": new_after_n_chars,
                "max_characters": max_characters,
                "overlap": overlap,
                "overlap_all": overlap_all,
                "extract_image_block_types": extract_image_block_types,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["files"]) -> MetaOapg.properties.files: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["strategy"]) -> MetaOapg.properties.strategy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gz_uncompressed_content_type"]) -> MetaOapg.properties.gz_uncompressed_content_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["output_format"]) -> MetaOapg.properties.output_format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coordinates"]) -> MetaOapg.properties.coordinates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encoding"]) -> MetaOapg.properties.encoding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hi_res_model_name"]) -> MetaOapg.properties.hi_res_model_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["include_page_breaks"]) -> MetaOapg.properties.include_page_breaks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["languages"]) -> 'PartitionParametersLanguages': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pdf_infer_table_structure"]) -> MetaOapg.properties.pdf_infer_table_structure: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skip_infer_table_types"]) -> 'PartitionParametersSkipInferTableTypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xml_keep_tags"]) -> MetaOapg.properties.xml_keep_tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chunking_strategy"]) -> MetaOapg.properties.chunking_strategy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["multipage_sections"]) -> MetaOapg.properties.multipage_sections: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["combine_under_n_chars"]) -> MetaOapg.properties.combine_under_n_chars: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new_after_n_chars"]) -> MetaOapg.properties.new_after_n_chars: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_characters"]) -> MetaOapg.properties.max_characters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overlap"]) -> MetaOapg.properties.overlap: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overlap_all"]) -> MetaOapg.properties.overlap_all: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extract_image_block_types"]) -> 'PartitionParametersExtractImageBlockTypes': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["files", "strategy", "gz_uncompressed_content_type", "output_format", "coordinates", "encoding", "hi_res_model_name", "include_page_breaks", "languages", "pdf_infer_table_structure", "skip_infer_table_types", "xml_keep_tags", "chunking_strategy", "multipage_sections", "combine_under_n_chars", "new_after_n_chars", "max_characters", "overlap", "overlap_all", "extract_image_block_types", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["files"]) -> typing.Union[MetaOapg.properties.files, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["strategy"]) -> typing.Union[MetaOapg.properties.strategy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gz_uncompressed_content_type"]) -> typing.Union[MetaOapg.properties.gz_uncompressed_content_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["output_format"]) -> typing.Union[MetaOapg.properties.output_format, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coordinates"]) -> typing.Union[MetaOapg.properties.coordinates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encoding"]) -> typing.Union[MetaOapg.properties.encoding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hi_res_model_name"]) -> typing.Union[MetaOapg.properties.hi_res_model_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["include_page_breaks"]) -> typing.Union[MetaOapg.properties.include_page_breaks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["languages"]) -> typing.Union['PartitionParametersLanguages', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pdf_infer_table_structure"]) -> typing.Union[MetaOapg.properties.pdf_infer_table_structure, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skip_infer_table_types"]) -> typing.Union['PartitionParametersSkipInferTableTypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xml_keep_tags"]) -> typing.Union[MetaOapg.properties.xml_keep_tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chunking_strategy"]) -> typing.Union[MetaOapg.properties.chunking_strategy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["multipage_sections"]) -> typing.Union[MetaOapg.properties.multipage_sections, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["combine_under_n_chars"]) -> typing.Union[MetaOapg.properties.combine_under_n_chars, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new_after_n_chars"]) -> typing.Union[MetaOapg.properties.new_after_n_chars, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_characters"]) -> typing.Union[MetaOapg.properties.max_characters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overlap"]) -> typing.Union[MetaOapg.properties.overlap, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overlap_all"]) -> typing.Union[MetaOapg.properties.overlap_all, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extract_image_block_types"]) -> typing.Union['PartitionParametersExtractImageBlockTypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["files", "strategy", "gz_uncompressed_content_type", "output_format", "coordinates", "encoding", "hi_res_model_name", "include_page_breaks", "languages", "pdf_infer_table_structure", "skip_infer_table_types", "xml_keep_tags", "chunking_strategy", "multipage_sections", "combine_under_n_chars", "new_after_n_chars", "max_characters", "overlap", "overlap_all", "extract_image_block_types", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        files: typing.Union[MetaOapg.properties.files, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        strategy: typing.Union[MetaOapg.properties.strategy, str, schemas.Unset] = schemas.unset,
        gz_uncompressed_content_type: typing.Union[MetaOapg.properties.gz_uncompressed_content_type, str, schemas.Unset] = schemas.unset,
        output_format: typing.Union[MetaOapg.properties.output_format, str, schemas.Unset] = schemas.unset,
        coordinates: typing.Union[MetaOapg.properties.coordinates, bool, schemas.Unset] = schemas.unset,
        encoding: typing.Union[MetaOapg.properties.encoding, str, schemas.Unset] = schemas.unset,
        hi_res_model_name: typing.Union[MetaOapg.properties.hi_res_model_name, str, schemas.Unset] = schemas.unset,
        include_page_breaks: typing.Union[MetaOapg.properties.include_page_breaks, bool, schemas.Unset] = schemas.unset,
        languages: typing.Union['PartitionParametersLanguages', schemas.Unset] = schemas.unset,
        pdf_infer_table_structure: typing.Union[MetaOapg.properties.pdf_infer_table_structure, bool, schemas.Unset] = schemas.unset,
        skip_infer_table_types: typing.Union['PartitionParametersSkipInferTableTypes', schemas.Unset] = schemas.unset,
        xml_keep_tags: typing.Union[MetaOapg.properties.xml_keep_tags, bool, schemas.Unset] = schemas.unset,
        chunking_strategy: typing.Union[MetaOapg.properties.chunking_strategy, str, schemas.Unset] = schemas.unset,
        multipage_sections: typing.Union[MetaOapg.properties.multipage_sections, bool, schemas.Unset] = schemas.unset,
        combine_under_n_chars: typing.Union[MetaOapg.properties.combine_under_n_chars, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        new_after_n_chars: typing.Union[MetaOapg.properties.new_after_n_chars, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_characters: typing.Union[MetaOapg.properties.max_characters, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        overlap: typing.Union[MetaOapg.properties.overlap, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        overlap_all: typing.Union[MetaOapg.properties.overlap_all, bool, schemas.Unset] = schemas.unset,
        extract_image_block_types: typing.Union['PartitionParametersExtractImageBlockTypes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PartitionParameters':
        return super().__new__(
            cls,
            *args,
            files=files,
            strategy=strategy,
            gz_uncompressed_content_type=gz_uncompressed_content_type,
            output_format=output_format,
            coordinates=coordinates,
            encoding=encoding,
            hi_res_model_name=hi_res_model_name,
            include_page_breaks=include_page_breaks,
            languages=languages,
            pdf_infer_table_structure=pdf_infer_table_structure,
            skip_infer_table_types=skip_infer_table_types,
            xml_keep_tags=xml_keep_tags,
            chunking_strategy=chunking_strategy,
            multipage_sections=multipage_sections,
            combine_under_n_chars=combine_under_n_chars,
            new_after_n_chars=new_after_n_chars,
            max_characters=max_characters,
            overlap=overlap,
            overlap_all=overlap_all,
            extract_image_block_types=extract_image_block_types,
            _configuration=_configuration,
            **kwargs,
        )

from unstructured_python_sdk.model.partition_parameters_extract_image_block_types import PartitionParametersExtractImageBlockTypes
from unstructured_python_sdk.model.partition_parameters_languages import PartitionParametersLanguages
from unstructured_python_sdk.model.partition_parameters_skip_infer_table_types import PartitionParametersSkipInferTableTypes
